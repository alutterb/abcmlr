}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
mu_guess<-seq(-1,10, length.out=100)
mu_guess
sig_guess<-seq(0.1,6, length.out=length(mu_guess))
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
mu_guess<-seq(-1,5, length.out=100)
mu_guess
fun(mu_guess)
sig_guess<-seq(0.1,6, length.out=length(mu_guess))
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
library(scatterplot3d)
scatterplot3d(log.lik)
mu_guess
mu_guess<-seq(-15,15, length.out=100)
mu_guess
fun(mu_guess)
sig_guess<-seq(0.1,6, length.out=length(mu_guess))
fun2<-function(x, mu_guess, sig_guess){
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
#log.lik[,1:2]<-cbind(rep(mu_guess, each=length(mu_guess)),rep(sig_guess, length(sig_guess)))
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(mu_guess[which.min(log.lik)])
}
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
library(scatterplot3d)
scatterplot3d(log.lik)
log.lik
plot3d(log.lik)
is.infinite(log.lik)
is.infinite(log.lik[,3])
log.lik[is.infinite(log.lik[,3]),3)
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(mu_guess[which.min(log.lik)])
}
paste
fun(mu_guess, each=20)
# we don't have
#Then we formulate the log-likelihood function.
LL <- function(x,par) {
mu<-par[1]
sigma<-par[2]
lik = dnorm(x, mu, sigma)
-sum(log(lik))
}
start<-c(2,2)
optim(par=start, fn=LL,x=x, method = "Nelder-Mead")
log.lik[is.infinite(log.lik[,3]),3]
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
image(log.lik)
contour(log.lik)
mat(log.lik[,3],ncol=unique(log.lik[,1]))
matrix(log.lik[,3],ncol=unique(log.lik[,1]))
unique(log.lik[,1])
log.lik[,3]
matrix(log.lik[,3],ncol=unique(log.lik[,1]), by.row=T)
matrix(log.lik[,3],ncol=unique(log.lik[,1]), byrow=T)
unique(log.lik[,1])
matrix(log.lik[,3],ncol=length(unique(log.lik[,1])), byrow=T)
mat<-matrix(log.lik[,3],ncol=length(unique(log.lik[,1])), byrow=T)
contour(mat)
image(mat)
library(scatterplot3d)
scatterplot3d(log.lik)
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
# let's compute the likelihood
# of a single random variable
# drawn from a normal distribution
set.seed(1001)
mu=3
sigma=1
N <- 100
x <- rnorm(N, mean = mu, sd = sigma)
mean(x)
sd(x)
# the likelihood function is dnorm()
x[1]
dnorm(x = x[1],mean=mu,sd=sigma)
curve(dnorm(x, mean=mu,sd=sigma), xlim=c(-1.5,8))
segments(x0 = x[1], x1=x[1], y0=0,y1=dnorm(x = x[1],mean=mu,sd=sigma), col="red")
arrows(x0 = 6, x1=x[1], y0=0.1,y1=dnorm(x = x[1],mean=mu,sd=sigma), col="red")
0
dnorm(x = 0,mean=mu,sd=sigma)
segments(x0 = 0, x1=0, y0=0,y1=dnorm(x = 0, mean=mu,sd=sigma), col="blue")
arrows(x0 = -1, x1=0, y0=.1,y1=dnorm(x = 0, mean=mu,sd=sigma), col="blue")
3
dnorm(x = 3,mean=mu,sd=sigma)
segments(x0 = 3, x1=3, y0=0,y1=dnorm(x = 3, mean=mu,sd=sigma), col="orange")
arrows(x0 = 1, x1=3, y0=.3,y1=dnorm(x = 3, mean=mu,sd=sigma), col="orange")
# by hand
a<-1/(sqrt(2*pi*(sigma^2)))
b<-exp(-(((x-mu)^2)/(2*sigma^2)))
a*b
# what about more than 1 data point?
# like the x vector we just sampled from the normal distribution
# in line 8? what is the likelihood of ALL those values?
# turns out that the likelihood of two samples is the product of their individual likelihoods
# let's take the first 2 samples in x
dnorm(x[1], mean=mu,sd=sigma) * dnorm(x[2], mean=mu,sd=sigma)
# that's it!
# it follows then that the likelihood of all values in x is the product
# of all x's likelihoods, which are:
dnorm(x, mean=mu,sd=sigma)
#their product would be...
prod(dnorm(x, mean=mu,sd=sigma)) # something tiny
# but because we know that the log of tiny values is a more manageable value
log(prod(dnorm(x, mean=mu,sd=sigma)))
# but because ALSO know that the log of tiny values is a negative value
# we add a negative to the log
-log(prod(dnorm(x, mean=mu,sd=sigma)))
# so, we say that we compute the negative log-likelihood
# we can also sum the logs, summing the log of two values is equal
# to the product of their unlogged (exponentiated) values
-sum(log(dnorm(x, mean=mu,sd=sigma)))
# likelihood ratio
-sum(log(dnorm(x, mean=1,sd=1)))/
-sum(log(dnorm(x, mean=mu,sd=sigma)))
log(prod(dnorm(x, mean=mu,sd=1)))
# Imagine we have x, but did not know mu or sigma,
# but wanted to estimate mu and sigma
# we can do this by asking "what values of the mu and sigma parameters,
# maximize the likelihood of x?" Hence Maximum Likelihood
# create a vecor with a series of 4 guesses, between -10 and 15
mu_guess<-seq(-10,15, length.out=4)
mu_guess
# you can imagine we can iterate each parameter until we get to the maximum
# let's just take mu, imagine we already know sigma
fun<-function(guess){
log.lik<-numeric(length(mu_guess))
for(i in 1:length(mu_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=1)
log.lik[i]<- -sum(log(lik))
}
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(mu_guess[which.min(log.lik)])
}
fun(mu_guess)
40*8*16
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
x<-rnorm(100, mu=3, sd=2)
mu_guess<-seq(-15,15, length.out=100)
mu_guess
fun(mu_guess)
mu_guess<-seq(-15,20, length.out=100)
mu_guess
fun(mu_guess)
mu_guess<-seq(-15,22, length.out=100)
mu_guess
fun(mu_guess)
mu_guess<-seq(-14,22, length.out=100)
mu_guess
fun(mu_guess)
mu_guess<-seq(-17,22, length.out=100)
mu_guess
fun(mu_guess)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
fun(mu_guess)
sig_guess<-seq(0.1,6, length.out=length(mu_guess))
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
sig_guess<-seq(0.9,6, length.out=length(mu_guess))
fun2<-function(x, mu_guess, sig_guess){
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
#log.lik[,1:2]<-cbind(rep(mu_guess, each=length(mu_guess)),rep(sig_guess, length(sig_guess)))
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
# mat<-matrix(log.lik[,3],ncol=length(unique(log.lik[,1])), byrow=T)
# contour(mat)
# image(mat)
library(rgl)
plot3d(log.lik)
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(mu_guess[which.min(log.lik)])
}
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
library(rgl)
plot3d(log.lik)
x<-rnorm(100, mu=3, sd=3)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
sig_guess<-seq(1,6, length.out=length(mu_guess))
fun2<-function(x, mu_guess, sig_guess){
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
#log.lik[,1:2]<-cbind(rep(mu_guess, each=length(mu_guess)),rep(sig_guess, length(sig_guess)))
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
# mat<-matrix(log.lik[,3],ncol=length(unique(log.lik[,1])), byrow=T)
# contour(mat)
# image(mat)
library(rgl)
plot3d(log.lik)
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(mu_guess[which.min(log.lik)])
}
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
#log.lik[,1:2]<-cbind(rep(mu_guess, each=length(mu_guess)),rep(sig_guess, length(sig_guess)))
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
# mat<-matrix(log.lik[,3]
plot3d(log.lik)
which.min(log.lik[,3])
log.lik[which.min(log.lik[,3]),]
plot3d(log.lik)
x<-rnorm(100, mu=8, sd=3)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
fun(mu_guess)
fun<-function(x, mu_guess){
log.lik<-numeric(length(mu_guess))
for(i in 1:length(mu_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=1)
log.lik[i]<- -sum(log(lik))
}
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(mu_guess[which.min(log.lik)])
}
fun(mu_guess)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
fun(mu_guess)
fun(x,mu_guess)
x<-rnorm(100, mu=8, sd=3)
x<-rnorm(100, mean=8, sd=3)
fun(x=x,mu_guess)
x<-rnorm(100, mean=8, sd=3)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
fun(mu_guess)
sig_guess<-seq(1,6, length.out=length(mu_guess))
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
log.lik[which.min(log.lik[,3]),]
plot3d(log.lik)
x<-rnorm(100, mean=550, sd=25)
mu_guess<-seq(200,800, length.out=100)
mu_guess
fun(mu_guess)
sig_guess<-seq(10,40, length.out=length(mu_guess))
fun(x, mu_guess)
x<-rnorm(100, mean=550, sd=25)
mu_guess<-seq(200,800, length.out=100)
mu_guess
fun(x, mu_guess)
log.lik<-numeric(length(mu_guess))
for(i in 1:length(mu_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=1)
log.lik[i]<- -sum(log(lik))
}
plot(mu_guess, log.lik, cex=.75,pch=19)
log.lik
dnorm(x, mean=mu_guess[i],sd=1)
x<-rnorm(100, mean=550, sd=25)
mu_guess<-seq(200,800, length.out=100)
mu_guess
log.lik<-NULL #numeric(length(mu_guess)^2 *3)
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
log.lik[which.min(log.lik[,3]),]
library(rgl)
plot3d(log.lik)
x<-rnorm(100, mean=8, sd=3)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
fun(x, mu_guess)
sig_guess<-seq(1,6, length.out=length(mu_guess))
plot3d(log.lik)
min<-log.lik[which.min(log.lik),]
min<-log.lik[which.min(log.lik[,3]),]
min
log.lik<-NULL
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
log.lik[which.min(log.lik[,3]),]
library(rgl)
plot3d(log.lik)
min<-log.lik[which.min(log.lik[,3]),]
which.min(log.lik[,3])
minl<-which.min(log.lik[,3])
min<-log.lik[which.min(log.lik[,3]),]
minl
log.lik[c(log.lik-1),log.lik,(log.lik+1)]
log.lik[c(minl-1),minl,(minl+1)]
log.lik[c((minl-1),minl,(minl+1)),]
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red"]
plot(mu_guess, log.lik, cex=.75,pch=19)
abline(v=mu_guess[which.min(log.lik)])
return(log.lik[which.min(log.lik),])
}
paste
fun(mu_guess, each=20)
# we don't have
#Then we formulate the log-likelihood function.
LL <- function(x,par) {
mu<-par[1]
sigma<-par[2]
lik = dnorm(x, mu, sigma)
-sum(log(lik))
}
start<-c(2,2)
optim(par=start, fn=LL,x=x, method = "Nelder-Mead")
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red")
log.lik[c((minl-1),minl,(minl+1)),]
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red",size=10)
minl
min
contour(log.lik)
image(log.lik)
mat<-matrix(log.lik[,3],ncol=length(unique(log.lik[,1])), byrow=T)
contour(mat)
image(mat)
plot3d(log.lik,zlim=c(0,5000))
plot3d(log.lik,zlim=c(0,1000))
plot3d(log.lik,zlim=c(0,1000), aspect = FALSE)
plot3d(log.lik,zlim=c(0,1000), aspect = FALSE)
plot3d(log.lik,zlim=c(0,1000), aspect = TRUE)
plot3d(log.lik,zlim=c(0,1000), aspect = TRUE)
minl<-which.min(log.lik[,3])
min<-log.lik[which.min(log.lik[,3]),]
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red",size=10)
plot3d(log.lik,zlim=c(0,500), aspect = TRUE)
plot3d(log.lik,zlim=c(0,500), aspect = TRUE)
minl<-which.min(log.lik[,3])
min<-log.lik[which.min(log.lik[,3]),]
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red",size=10)
plot3d(log.lik,zlim=c(0,1000), aspect = TRUE)
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red",size=10)
image(log.lik)
fun2<-function(x, mu_guess, sig_guess){
log.lik<-NULL
for(i in 1:length(mu_guess)){
for(j in 1:length(sig_guess)){
lik<-dnorm(x, mean=mu_guess[i],sd=sig_guess[j])
log.lik<- c(log.lik,c(mu_guess[i],sig_guess[j],-sum(log(lik))))
}
}
log.lik<-matrix(log.lik, ncol=3, byrow = T)
log.lik[is.infinite(log.lik[,3]),3]<-NA
library(scatterplot3d)
scatterplot3d(log.lik)
log.lik[which.min(log.lik[,3]),]
# mat<-matrix(log.lik[,3],ncol=length(unique(log.lik[,1])), byrow=T)
# contour(mat)
# image(mat)
library(rgl)
plot3d(log.lik,zlim=c(0,1000), aspect = TRUE)
minl<-which.min(log.lik[,3])
min<-log.lik[which.min(log.lik[,3]),]
points3d(log.lik[c((minl-1),minl,(minl+1)),],col="red",size=10)
return(min)
}
fun2(x, mu_guess)
x<-rnorm(100, mean=8, sd=3)
mu_guess<-seq(-16,22, length.out=100)
mu_guess
sig_guess<-seq(1,6, length.out=length(mu_guess))
fun2(x, mu_guess, sig_guess)
LL <- function(x,par) {
mu<-par[1]
sigma<-par[2]
lik = dnorm(x, mu, sigma)
-sum(log(lik))
}
start<-c(2,2)
start<-c(1,1)
optim(par=start, fn=LL,x=x, method = "Nelder-Mead")
fun2(x, mu_guess, sig_guess)
optim(par=start, fn=LL,x=x, method = "SANN")
